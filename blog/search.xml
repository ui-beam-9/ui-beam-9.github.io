<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用 GitHub Actions 编译openwrt固件</title>
    <url>/2022/04/28/37d09a23ec86/</url>
    <content><![CDATA[<h1 id="使用-GitHub-Actions-编译openwrt固件"><a href="#使用-GitHub-Actions-编译openwrt固件" class="headerlink" title="使用 GitHub Actions 编译openwrt固件"></a>使用 GitHub Actions 编译openwrt固件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Github Ac­tions 是 GitHub 推出的持续集成 (Con­tin­u­ous in­te­gra­tion，简称 CI) 服务，它提供了配置非常不错的虚拟服务器环境，基于它可以进行构建、测试、打包、部署项目。所以就有了 P3TERX 大佬已编写好的 Open­Wrt 编译解决方案。这篇文章就是介绍如何使用<a href="https://p3terx.com/">P3TERX</a> 大佬项目，进行云编译 OpenWrt固件，并且还可以自定义自己想要的插件。</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul>
<li>P3TERX编译项目：<a href="https://github.com/P3TERX/Actions-OpenWrt">https://github.com/P3TERX/Actions-OpenWrt</a></li>
<li>Lean的openwrt源码：<a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a></li>
<li>kenzok8的插件库：<a href="https://github.com/kenzok8/openwrt-packages">https://github.com/kenzok8/openwrt-packages</a></li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>注册一个Github账号</li>
<li>搭建编译环境，用来生成.config配置文件，推荐使用Vmware安装Ubuntu虚拟机（需要自定义插件的这个必选）</li>
</ul>
<h2 id="基础编译"><a href="#基础编译" class="headerlink" title="基础编译"></a>基础编译</h2><p>TIPS：这个编译只能编译出一个能正常使用的固件，很多插件都是没有的，关于自定义插件请看后面的进阶编译。</p>
<ul>
<li>首先必须要熟悉整个 Open­Wrt 的编译过程，这会让你非常容易上手并使用 GitHub Ac­tions 进行编译，即使你没有成功过。因为实际上本地编译近 90% 失败的原因是因为网络问题导致的，中国大陆特色，咱也不敢多说。GitHub Ac­tions 服务器由 Mi­crosoft Azure 提供，拥有万兆带宽，可以使编译成功率大大提升</li>
<li>打开 P3TERX 编译项目，点击页面中的 Use this template （使用这个模版）按钮<br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/Use%20this%20template.png" alt="Use%20this%20template"></li>
<li>填写仓库名称，然后点击Create repository from template（从模版创建储存库）按钮<br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/Create%20repository%20from%20template.png" alt="Create%20repository%20from%20template"></li>
<li>经过几秒钟的等待，页面会跳转到新建的仓库，内容和P3TERX的项目是相同的。<br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/P3TERX.png" alt="P3TERX"></li>
<li>点击 Actions 选择 Build OpenWrt，然后点击 Run Workflow 选项，在点击 Run Workflow（运行工作流）按钮即可开始编译<br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/Build%20OpenWrt.png" alt="Build%20OpenWrt"></li>
<li>在等待编译完成的过程中，你可以进入<a href="https://github.com/P3TERX/Actions-OpenWrt">这个项目</a>点击右上角的star，这是对项目最大的支持。<br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/star.png" alt="star"></li>
<li>经过几个小时的等待，不出意外你就可以在 Actions 页面看到已经打包好的固件目录压缩包<br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/download.png" alt="download"></li>
</ul>
<h2 id="进阶编译"><a href="#进阶编译" class="headerlink" title="进阶编译"></a>进阶编译</h2><ul>
<li>如果你想要编译出更多的固件，可以使用这个方法，这个编译可以编译出多个固件，比如支持更多的插件，比如支持更多的系统，比如支持更多的平台。</li>
<li>接下来说下如何自定义插件，首先得搭建一个编译环境，这个编译环境可以是虚拟机，也可以是本地编译，我这里使用的是VMware安装的Ubuntu，具体安装方法我就不说了，百度上有很多资料，我就不多说了，具体请看下面的编译过程。</li>
<li>然后打开虚拟机，右键打开终端，然后输入以下指令更新软件包和安装编译依赖<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update -y</span><br><span class="line">sudo apt full-upgrade -y</span><br><span class="line">sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \</span><br><span class="line">bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \</span><br><span class="line">git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \</span><br><span class="line">libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \</span><br><span class="line">mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \</span><br><span class="line">rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev</span><br></pre></td></tr></table></figure></li>
<li>接下来需要下载源代码，然后进入到源代码目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/coolsnowwolf/lede</span><br><span class="line">cd lede</span><br></pre></td></tr></table></figure></li>
<li>然后将插件库地址添加到配置文件进去，这里我使用的是<a href="https://github.com/kenzok8/openwrt-packages">kenzok8的插件库</a>，打开feeds.conf.default，将插件库地址添加到最后一行并保存<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src-git kenzo https://github.com/kenzok8/openwrt-packages.git</span><br><span class="line">src-git small https://github.com/kenzok8/small.git</span><br></pre></td></tr></table></figure>
<img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/add.png" alt="add"></li>
<li>配置文件修改好之后，输入以下指令更新feeds并安装插件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./scripts/feeds update -a</span><br><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure></li>
<li>然后输入make menuconfig进入编译配置<br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/menuconfig.png" alt="menuconfig"></li>
<li>在这个界面可以设置很多参数，包括平台，插件，系统，编译器等等，我这里就只设置了插件，其他参数没有设置，如果你想设置其他参数，可以自己<a href="https://max.book118.com/html/2021/0405/8133116046003071.shtm">点击这里</a>查看,插件的详细设置可以看<a href="https://www.right.com.cn/forum/thread-3682029-1-1.html">这里</a></li>
<li>设置好参数之后，点击Save保存退出，然后打开源代码目录下的.config文件，把里面的内容全部复制<br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/config.png" alt="config"></li>
<li>然后打开刚刚新建的仓库，然后点击 Add file 选择 Create new file（创建新文件），文件名填.Config，把刚刚虚拟机上的.config复制的内容粘贴到里面去<br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/Create%20new%20file.png" alt="Create%20new%20file"><br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/github_config.png" alt="github_config"></li>
<li>然后再次点击 Actions 选择 Build OpenWrt，然后点击 Run Workflow 选项，在点击 Run Workflow（运行工作流）按钮即可开始编译你的自定义固件，等待几个小时就可以在 Actions 页面看到已经打包好的固件目录压缩包<br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/Build%20OpenWrt.png" alt="Build%20OpenWrt"><br><img src="https://cos.ui-beam.com/images/course/Actions-OpenWrt/download.png" alt="download"></li>
<li>更多进阶方法在<a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html#toc_6">p3terx博客</a>查看，这里就不在赘述了</li>
</ul>
]]></content>
      <categories>
        <category>openwrt</category>
      </categories>
  </entry>
  <entry>
    <title>基于 Cloudflare Workers 搭建一个专属的 Docker 镜像站以及拉取代理</title>
    <url>/2024/07/04/f30d520b63c9/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>最近国内的docker镜像站已经算是全军覆没了，具体什么原因也无从知晓，在拉取镜像的时候直接显示连接超时，为了能正常拉取镜像，最好的办法就是搭建一个自己专属的代理，这里我在GitHub上找到了一个非常不错的项目，可以完美解决镜像无法拉取的情况，而且还可以搭建出一个hub镜像站，方便搜索镜像名称。<br><img src="https://cos.ui-beam.com/images/blog/article/cloudflare-workers-docker-proxy/docker-pull-timeout.png" alt="docker-pull-timeout"></li>
</ul>
<h2 id="什么是Cloudflare-Wokers"><a href="#什么是Cloudflare-Wokers" class="headerlink" title="什么是Cloudflare Wokers"></a>什么是Cloudflare Wokers</h2><ul>
<li>Cloudflare Workers 是 Cloudflare 提供的一个服务器less（无服务器）计算服务，它允许开发者在 Cloudflare 的全球边缘网络上运行 JavaScript、Rust 或其他 WASM（WebAssembly）支持的语言编写的代码。通过这种方式，你的代码能够在离用户最近的地理位置上运行，从而实现低延迟和高性能的用户体验。<br>以下是 Cloudflare Workers 的一些主要特点：</li>
</ul>
<ol>
<li>无服务器计算：<br>你不需要管理或维护服务器，而是只需要关注编写和部署代码。Cloudflare 会为你处理基础设施和扩展问题。</li>
<li>边缘计算：<br>代码直接运行在 Cloudflare 的全球边缘网络上，而不是集中在某个地区的服务器上。这意味着你的代码可以在离用户最近的地方运行，实现低延迟和高速度。</li>
<li>多语言支持：<br>虽然最初是为 JavaScript 设计的，但现在 Cloudflare Workers 也支持 Rust 和任何能编译成 WebAssembly 的语言。</li>
<li>简单的部署和管理：<br>Cloudflare 提供了简单的命令行工具和管理界面，使得部署和管理你的 Workers 变得非常简单。</li>
<li>内置的键值存储：<br>Cloudflare Workers 附带了一个名为 Workers KV 的内置键值存储解决方案，使得你可以在边缘网络上存储和检索数据。</li>
<li>HTTP 路由和请求处理：<br>你可以轻松地创建 HTTP 路由，处理 HTTP 请求和响应，以及修改传入和传出的 HTTP 流量。</li>
<li>安全性和隐私：<br>Cloudflare Workers 运行在一个安全的沙箱环境中，以保护你的代码和数据。</li>
<li>集成和生态系统：<br>Cloudflare Workers 可以与 Cloudflare 的其他产品和服务集成，如 Cloudflare Pages、Durable Objects 和 Cloudflare Access 等。<br>Cloudflare Workers 为开发者提供了一个灵活、高性能、并且易于使用的边缘计算平台，使得你可以构建和部署全球分布式应用。</li>
</ol>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>一个 Cloudflare 账号，没有的话直接注册一个就行，这里也把注册链接贴出来：<a href="https://dash.cloudflare.com/sign-up">https://dash.cloudflare.com/sign-up</a></li>
<li>Cloudflare 账号下需要添加一个域名，推荐到腾讯云注册一个域名，首年只需几块钱，特别便宜，这里也把优惠链接贴出：<a href="https://cloud.tencent.com/act/pro/domain_sales?from=19501">https://cloud.tencent.com/act/pro/domain_sales?from=19501</a> 注册好域名之后，打开<a href="https://dash.cloudflare.com/">Cloudflare的控制台</a>，点击添加站点，输入新注册的域名，之后按照提示，打开<a href="https://console.cloud.tencent.com/domain/all-domain/all">腾讯云的控制台</a>，点击新注册的域名，打开修改DNS服务器，把原来的地址全部删掉，输入刚刚Cloudflare给的两个地址即可，稍等一会，再次打开<a href="https://dash.cloudflare.com/">Cloudflare的控制台</a>，就能看到域名已经显示活动了，这就添加成功了<br><img src="https://cos.ui-beam.com/images/blog/article/cloudflare-workers-docker-proxy/cloud-tencent-domains-sales.png" alt="cloud-tencent-domains-sales"></li>
</ul>
<h1 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h1><ul>
<li>打开<a href="https://dash.cloudflare.com/">Cloudflare的控制台</a>，点Workers 和 Pages，在点击创建-创建Worker，这里可以自定义想要的名称，也可以使用默认的，我就输了个docker-proxy，点击创建，然后直接点编辑代码</li>
<li>打开项目地址：<a href="https://github.com/cmliu/CF-Workers-docker.io/blob/main/_worker.js">https://github.com/cmliu/CF-Workers-docker.io/blob/main/_worker.js</a><br>直接复制里面的代码，这里有些人可能打不开这个地址，这里也把代码直接放在下面了，点击小箭头可以打开查看，也可以直接点击复制<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _worker.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Docker镜像仓库主机地址</span></span><br><span class="line"><span class="keyword">let</span> hub_host = <span class="string">&#x27;registry-1.docker.io&#x27;</span></span><br><span class="line"><span class="comment">// Docker认证服务器地址</span></span><br><span class="line"><span class="keyword">const</span> auth_url = <span class="string">&#x27;https://auth.docker.io&#x27;</span></span><br><span class="line"><span class="comment">// 自定义的工作服务器地址</span></span><br><span class="line"><span class="keyword">let</span> workers_url = <span class="string">&#x27;https://你的域名地址比如 docker.mydomain.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 屏蔽爬虫<span class="variable constant_">UA</span> = [<span class="string">&#x27;netcraft&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据主机名选择对应的上游地址</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">routeByHosts</span>(<span class="params">host</span>) &#123;</span><br><span class="line">		<span class="comment">// 定义路由表</span></span><br><span class="line">	<span class="keyword">const</span> routes = &#123;</span><br><span class="line">		<span class="comment">// 生产环境</span></span><br><span class="line">		<span class="string">&quot;quay&quot;</span>: <span class="string">&quot;quay.io&quot;</span>,</span><br><span class="line">		<span class="string">&quot;gcr&quot;</span>: <span class="string">&quot;gcr.io&quot;</span>,</span><br><span class="line">		<span class="string">&quot;k8s-gcr&quot;</span>: <span class="string">&quot;k8s.gcr.io&quot;</span>,</span><br><span class="line">		<span class="string">&quot;k8s&quot;</span>: <span class="string">&quot;registry.k8s.io&quot;</span>,</span><br><span class="line">		<span class="string">&quot;ghcr&quot;</span>: <span class="string">&quot;ghcr.io&quot;</span>,</span><br><span class="line">		<span class="string">&quot;cloudsmith&quot;</span>: <span class="string">&quot;docker.cloudsmith.io&quot;</span>,</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 测试环境</span></span><br><span class="line">		<span class="string">&quot;test&quot;</span>: <span class="string">&quot;registry-1.docker.io&quot;</span>,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (host <span class="keyword">in</span> routes) <span class="keyword">return</span> [ routes[host], <span class="literal">false</span> ];</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> [ hub_host, <span class="literal">true</span> ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">RequestInit</span>&#125; */</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PREFLIGHT_INIT</span> = &#123;</span><br><span class="line">	<span class="comment">// 预检请求配置</span></span><br><span class="line">	<span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">Headers</span>(&#123;</span><br><span class="line">		<span class="string">&#x27;access-control-allow-origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>, <span class="comment">// 允许所有来源</span></span><br><span class="line">		<span class="string">&#x27;access-control-allow-methods&#x27;</span>: <span class="string">&#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;</span>, <span class="comment">// 允许的HTTP方法</span></span><br><span class="line">		<span class="string">&#x27;access-control-max-age&#x27;</span>: <span class="string">&#x27;1728000&#x27;</span>, <span class="comment">// 预检请求的缓存时间</span></span><br><span class="line">	&#125;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造响应</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; body 响应体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; status 响应状态码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object&lt;string, string&gt;</span>&#125; headers 响应头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeRes</span>(<span class="params">body, status = <span class="number">200</span>, headers = &#123;&#125;</span>) &#123;</span><br><span class="line">	headers[<span class="string">&#x27;access-control-allow-origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span> <span class="comment">// 允许所有来源</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(body, &#123; status, headers &#125;) <span class="comment">// 返回新构造的响应</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造新的URL对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; urlStr URL字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newUrl</span>(<span class="params">urlStr</span>) &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(urlStr) <span class="comment">// 尝试构造新的URL对象</span></span><br><span class="line">	&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span> <span class="comment">// 构造失败返回null</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isUUID</span>(<span class="params">uuid</span>) &#123;</span><br><span class="line">	<span class="comment">// 定义一个正则表达式来匹配 UUID 格式</span></span><br><span class="line">	<span class="keyword">const</span> uuidRegex = <span class="regexp">/^[0-9a-f]&#123;8&#125;-[0-9a-f]&#123;4&#125;-[4][0-9a-f]&#123;3&#125;-[89ab][0-9a-f]&#123;3&#125;-[0-9a-f]&#123;12&#125;$/i</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 使用正则表达式测试 UUID 字符串</span></span><br><span class="line">	<span class="keyword">return</span> uuidRegex.<span class="title function_">test</span>(uuid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">nginx</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> text = <span class="string">`</span></span><br><span class="line"><span class="string">	&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">	&lt;html&gt;</span></span><br><span class="line"><span class="string">	&lt;head&gt;</span></span><br><span class="line"><span class="string">	&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span></span><br><span class="line"><span class="string">	&lt;style&gt;</span></span><br><span class="line"><span class="string">		body &#123;</span></span><br><span class="line"><span class="string">			width: 35em;</span></span><br><span class="line"><span class="string">			margin: 0 auto;</span></span><br><span class="line"><span class="string">			font-family: Tahoma, Verdana, Arial, sans-serif;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">	&lt;/style&gt;</span></span><br><span class="line"><span class="string">	&lt;/head&gt;</span></span><br><span class="line"><span class="string">	&lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">	&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span></span><br><span class="line"><span class="string">	working. Further configuration is required.&lt;/p&gt;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	&lt;p&gt;For online documentation and support please refer to</span></span><br><span class="line"><span class="string">	&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span></span><br><span class="line"><span class="string">	Commercial support is available at</span></span><br><span class="line"><span class="string">	&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">	&lt;/body&gt;</span></span><br><span class="line"><span class="string">	&lt;/html&gt;</span></span><br><span class="line"><span class="string">	`</span></span><br><span class="line">	<span class="keyword">return</span> text ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params">request, env, ctx</span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> <span class="title function_">getReqHeader</span> = (<span class="params">key</span>) =&gt; request.<span class="property">headers</span>.<span class="title function_">get</span>(key); <span class="comment">// 获取请求头</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>); <span class="comment">// 解析请求URL</span></span><br><span class="line">		<span class="keyword">const</span> userAgentHeader = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;User-Agent&#x27;</span>);</span><br><span class="line">		<span class="keyword">const</span> userAgent = userAgentHeader ? userAgentHeader.<span class="title function_">toLowerCase</span>() : <span class="string">&quot;null&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (env.<span class="property">UA</span>) 屏蔽爬虫<span class="variable constant_">UA</span> = 屏蔽爬虫<span class="variable constant_">UA</span>.<span class="title function_">concat</span>(<span class="keyword">await</span> <span class="title function_">ADD</span>(env.<span class="property">UA</span>));</span><br><span class="line">		workers_url = <span class="string">`https://<span class="subst">$&#123;url.hostname&#125;</span>`</span>;</span><br><span class="line">		<span class="keyword">const</span> pathname = url.<span class="property">pathname</span>;</span><br><span class="line">		<span class="keyword">const</span> hostname = url.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;hubhost&#x27;</span>) || url.<span class="property">hostname</span>; </span><br><span class="line">		<span class="keyword">const</span> hostTop = hostname.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>];<span class="comment">// 获取主机名的第一部分</span></span><br><span class="line">		<span class="keyword">const</span> checkHost = <span class="title function_">routeByHosts</span>(hostTop);</span><br><span class="line">		hub_host = checkHost[<span class="number">0</span>]; <span class="comment">// 获取上游地址</span></span><br><span class="line">		<span class="keyword">const</span> fakePage = checkHost[<span class="number">1</span>];</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`域名头部: <span class="subst">$&#123;hostTop&#125;</span>\n反代地址: <span class="subst">$&#123;hub_host&#125;</span>\n伪装首页: <span class="subst">$&#123;fakePage&#125;</span>`</span>);</span><br><span class="line">		<span class="keyword">const</span> isUuid = <span class="title function_">isUUID</span>(pathname.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>]);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (屏蔽爬虫<span class="variable constant_">UA</span>.<span class="title function_">some</span>(<span class="function"><span class="params">fxxk</span> =&gt;</span> userAgent.<span class="title function_">includes</span>(fxxk)) &amp;&amp; 屏蔽爬虫<span class="variable constant_">UA</span>.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="comment">//首页改成一个nginx伪装页</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="keyword">await</span> <span class="title function_">nginx</span>(), &#123;</span><br><span class="line">				<span class="attr">headers</span>: &#123;</span><br><span class="line">					<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html; charset=UTF-8&#x27;</span>,</span><br><span class="line">				&#125;,</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">const</span> conditions = [</span><br><span class="line">			isUuid,</span><br><span class="line">			pathname.<span class="title function_">includes</span>(<span class="string">&#x27;/_&#x27;</span>),</span><br><span class="line">			pathname.<span class="title function_">includes</span>(<span class="string">&#x27;/r&#x27;</span>),</span><br><span class="line">			pathname.<span class="title function_">includes</span>(<span class="string">&#x27;/v2/user&#x27;</span>),</span><br><span class="line">			pathname.<span class="title function_">includes</span>(<span class="string">&#x27;/v2/orgs&#x27;</span>),</span><br><span class="line">			pathname.<span class="title function_">includes</span>(<span class="string">&#x27;/v2/_catalog&#x27;</span>),</span><br><span class="line">			pathname.<span class="title function_">includes</span>(<span class="string">&#x27;/v2/categories&#x27;</span>),</span><br><span class="line">			pathname.<span class="title function_">includes</span>(<span class="string">&#x27;/v2/feature-flags&#x27;</span>),</span><br><span class="line">			pathname.<span class="title function_">includes</span>(<span class="string">&#x27;search&#x27;</span>),</span><br><span class="line">			pathname.<span class="title function_">includes</span>(<span class="string">&#x27;source&#x27;</span>),</span><br><span class="line">			pathname === <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">			pathname === <span class="string">&#x27;/favicon.ico&#x27;</span>,</span><br><span class="line">			pathname === <span class="string">&#x27;/auth/profile&#x27;</span>,</span><br><span class="line">		];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (conditions.<span class="title function_">some</span>(<span class="function"><span class="params">condition</span> =&gt;</span> condition) &amp;&amp; (fakePage === <span class="literal">true</span> || hostTop == <span class="string">&#x27;docker&#x27;</span>)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (env.<span class="property">URL302</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="title class_">Response</span>.<span class="title function_">redirect</span>(env.<span class="property">URL302</span>, <span class="number">302</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.<span class="property">URL</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span> (env.<span class="property">URL</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&#x27;nginx&#x27;</span>)&#123;</span><br><span class="line">					<span class="comment">//首页改成一个nginx伪装页</span></span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="keyword">await</span> <span class="title function_">nginx</span>(), &#123;</span><br><span class="line">						<span class="attr">headers</span>: &#123;</span><br><span class="line">							<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html; charset=UTF-8&#x27;</span>,</span><br><span class="line">						&#125;,</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(env.<span class="property">URL</span>, request));</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">const</span> newUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;https://registry.hub.docker.com&quot;</span> + pathname + url.<span class="property">search</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 复制原始请求的标头</span></span><br><span class="line">			<span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(request.<span class="property">headers</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 确保 Host 头部被替换为 hub.docker.com</span></span><br><span class="line">			headers.<span class="title function_">set</span>(<span class="string">&#x27;Host&#x27;</span>, <span class="string">&#x27;registry.hub.docker.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">const</span> newRequest = <span class="keyword">new</span> <span class="title class_">Request</span>(newUrl, &#123;</span><br><span class="line">					<span class="attr">method</span>: request.<span class="property">method</span>,</span><br><span class="line">					<span class="attr">headers</span>: headers,</span><br><span class="line">					<span class="attr">body</span>: request.<span class="property">method</span> !== <span class="string">&#x27;GET&#x27;</span> &amp;&amp; request.<span class="property">method</span> !== <span class="string">&#x27;HEAD&#x27;</span> ? <span class="keyword">await</span> request.<span class="title function_">blob</span>() : <span class="literal">null</span>,</span><br><span class="line">					<span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span></span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="title function_">fetch</span>(newRequest);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 修改包含 %2F 和 %3A 的请求</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="regexp">/%2F/</span>.<span class="title function_">test</span>(url.<span class="property">search</span>) &amp;&amp; <span class="regexp">/%3A/</span>.<span class="title function_">test</span>(url.<span class="title function_">toString</span>())) &#123;</span><br><span class="line">			<span class="keyword">let</span> modifiedUrl = url.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/%3A(?=.*?&amp;)/</span>, <span class="string">&#x27;%3Alibrary%2F&#x27;</span>);</span><br><span class="line">			url = <span class="keyword">new</span> <span class="title function_">URL</span>(modifiedUrl);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`handle_url: <span class="subst">$&#123;url&#125;</span>`</span>)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 处理token请求</span></span><br><span class="line">		<span class="keyword">if</span> (url.<span class="property">pathname</span>.<span class="title function_">includes</span>(<span class="string">&#x27;/token&#x27;</span>)) &#123;</span><br><span class="line">			<span class="keyword">let</span> token_parameter = &#123;</span><br><span class="line">				<span class="attr">headers</span>: &#123;</span><br><span class="line">					<span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;auth.docker.io&#x27;</span>,</span><br><span class="line">					<span class="string">&#x27;User-Agent&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;User-Agent&quot;</span>),</span><br><span class="line">					<span class="string">&#x27;Accept&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept&quot;</span>),</span><br><span class="line">					<span class="string">&#x27;Accept-Language&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Language&quot;</span>),</span><br><span class="line">					<span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Encoding&quot;</span>),</span><br><span class="line">					<span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">					<span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">			<span class="keyword">let</span> token_url = auth_url + url.<span class="property">pathname</span> + url.<span class="property">search</span></span><br><span class="line">			<span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(token_url, request), token_parameter)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 修改 /v2/ 请求路径</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="regexp">/^\/v2\/[^/]+\/[^/]+\/[^/]+$/</span>.<span class="title function_">test</span>(url.<span class="property">pathname</span>) &amp;&amp; !<span class="regexp">/^\/v2\/library/</span>.<span class="title function_">test</span>(url.<span class="property">pathname</span>)) &#123;</span><br><span class="line">			url.<span class="property">pathname</span> = url.<span class="property">pathname</span>.<span class="title function_">replace</span>(<span class="regexp">/\/v2\//</span>, <span class="string">&#x27;/v2/library/&#x27;</span>);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`modified_url: <span class="subst">$&#123;url.pathname&#125;</span>`</span>)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改请求的主机名</span></span><br><span class="line">		url.<span class="property">hostname</span> = hub_host;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 构造请求参数</span></span><br><span class="line">		<span class="keyword">let</span> parameter = &#123;</span><br><span class="line">			<span class="attr">headers</span>: &#123;</span><br><span class="line">				<span class="string">&#x27;Host&#x27;</span>: hub_host,</span><br><span class="line">				<span class="string">&#x27;User-Agent&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;User-Agent&quot;</span>),</span><br><span class="line">				<span class="string">&#x27;Accept&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept&quot;</span>),</span><br><span class="line">				<span class="string">&#x27;Accept-Language&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Language&quot;</span>),</span><br><span class="line">				<span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Encoding&quot;</span>),</span><br><span class="line">				<span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">				<span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">cacheTtl</span>: <span class="number">3600</span> <span class="comment">// 缓存时间</span></span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 添加Authorization头</span></span><br><span class="line">		<span class="keyword">if</span> (request.<span class="property">headers</span>.<span class="title function_">has</span>(<span class="string">&quot;Authorization&quot;</span>)) &#123;</span><br><span class="line">			parameter.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="title function_">getReqHeader</span>(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 发起请求并处理响应</span></span><br><span class="line">		<span class="keyword">let</span> original_response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(url, request), parameter)</span><br><span class="line">		<span class="keyword">let</span> original_response_clone = original_response.<span class="title function_">clone</span>();</span><br><span class="line">		<span class="keyword">let</span> original_text = original_response_clone.<span class="property">body</span>;</span><br><span class="line">		<span class="keyword">let</span> response_headers = original_response.<span class="property">headers</span>;</span><br><span class="line">		<span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(response_headers);</span><br><span class="line">		<span class="keyword">let</span> status = original_response.<span class="property">status</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 修改 Www-Authenticate 头</span></span><br><span class="line">		<span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;Www-Authenticate&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">let</span> auth = new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;Www-Authenticate&quot;</span>);</span><br><span class="line">			<span class="keyword">let</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(auth_url, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">			new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;Www-Authenticate&quot;</span>, response_headers.<span class="title function_">get</span>(<span class="string">&quot;Www-Authenticate&quot;</span>).<span class="title function_">replace</span>(re, workers_url));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 处理重定向</span></span><br><span class="line">		<span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;Location&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="title function_">httpHandler</span>(request, new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;Location&quot;</span>))</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 返回修改后的响应</span></span><br><span class="line">		<span class="keyword">let</span> response = <span class="keyword">new</span> <span class="title class_">Response</span>(original_text, &#123;</span><br><span class="line">			status,</span><br><span class="line">			<span class="attr">headers</span>: new_response_headers</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">return</span> response;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理HTTP请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Request</span>&#125; req 请求对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; pathname 请求路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">httpHandler</span>(<span class="params">req, pathname</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> reqHdrRaw = req.<span class="property">headers</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 处理预检请求</span></span><br><span class="line">	<span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;OPTIONS&#x27;</span> &amp;&amp;</span><br><span class="line">		reqHdrRaw.<span class="title function_">has</span>(<span class="string">&#x27;access-control-request-headers&#x27;</span>)</span><br><span class="line">	) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="literal">null</span>, <span class="variable constant_">PREFLIGHT_INIT</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> rawLen = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> reqHdrNew = <span class="keyword">new</span> <span class="title class_">Headers</span>(reqHdrRaw)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> refer = reqHdrNew.<span class="title function_">get</span>(<span class="string">&#x27;referer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> urlStr = pathname</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> urlObj = <span class="title function_">newUrl</span>(urlStr)</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">RequestInit</span>&#125; */</span></span><br><span class="line">	<span class="keyword">const</span> reqInit = &#123;</span><br><span class="line">		<span class="attr">method</span>: req.<span class="property">method</span>,</span><br><span class="line">		<span class="attr">headers</span>: reqHdrNew,</span><br><span class="line">		<span class="attr">redirect</span>: <span class="string">&#x27;follow&#x27;</span>,</span><br><span class="line">		<span class="attr">body</span>: req.<span class="property">body</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">proxy</span>(urlObj, reqInit, rawLen)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">URL</span>&#125; urlObj URL对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">RequestInit</span>&#125; reqInit 请求初始化对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; rawLen 原始长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">proxy</span>(<span class="params">urlObj, reqInit, rawLen</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(urlObj.<span class="property">href</span>, reqInit)</span><br><span class="line">	<span class="keyword">const</span> resHdrOld = res.<span class="property">headers</span></span><br><span class="line">	<span class="keyword">const</span> resHdrNew = <span class="keyword">new</span> <span class="title class_">Headers</span>(resHdrOld)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 验证长度</span></span><br><span class="line">	<span class="keyword">if</span> (rawLen) &#123;</span><br><span class="line">		<span class="keyword">const</span> newLen = resHdrOld.<span class="title function_">get</span>(<span class="string">&#x27;content-length&#x27;</span>) || <span class="string">&#x27;&#x27;</span></span><br><span class="line">		<span class="keyword">const</span> badLen = (rawLen !== newLen)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (badLen) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="title function_">makeRes</span>(res.<span class="property">body</span>, <span class="number">400</span>, &#123;</span><br><span class="line">				<span class="string">&#x27;--error&#x27;</span>: <span class="string">`bad len: <span class="subst">$&#123;newLen&#125;</span>, except: <span class="subst">$&#123;rawLen&#125;</span>`</span>,</span><br><span class="line">				<span class="string">&#x27;access-control-expose-headers&#x27;</span>: <span class="string">&#x27;--error&#x27;</span>,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">const</span> status = res.<span class="property">status</span></span><br><span class="line">	resHdrNew.<span class="title function_">set</span>(<span class="string">&#x27;access-control-expose-headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">	resHdrNew.<span class="title function_">set</span>(<span class="string">&#x27;access-control-allow-origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">	resHdrNew.<span class="title function_">set</span>(<span class="string">&#x27;Cache-Control&#x27;</span>, <span class="string">&#x27;max-age=1500&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 删除不必要的头</span></span><br><span class="line">	resHdrNew.<span class="title function_">delete</span>(<span class="string">&#x27;content-security-policy&#x27;</span>)</span><br><span class="line">	resHdrNew.<span class="title function_">delete</span>(<span class="string">&#x27;content-security-policy-report-only&#x27;</span>)</span><br><span class="line">	resHdrNew.<span class="title function_">delete</span>(<span class="string">&#x27;clear-site-data&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(res.<span class="property">body</span>, &#123;</span><br><span class="line">		status,</span><br><span class="line">		<span class="attr">headers</span>: resHdrNew</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">ADD</span>(<span class="params">envadd</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> addtext = envadd.<span class="title function_">replace</span>(<span class="regexp">/[	 |&quot;&#x27;\r\n]+/g</span>, <span class="string">&#x27;,&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/,+/g</span>, <span class="string">&#x27;,&#x27;</span>);	<span class="comment">// 将空格、双引号、单引号和换行符替换为逗号</span></span><br><span class="line">	<span class="comment">//console.log(addtext);</span></span><br><span class="line">	<span class="keyword">if</span> (addtext.<span class="title function_">charAt</span>(<span class="number">0</span>) == <span class="string">&#x27;,&#x27;</span>) addtext = addtext.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (addtext.<span class="title function_">charAt</span>(addtext.<span class="property">length</span> -<span class="number">1</span>) == <span class="string">&#x27;,&#x27;</span>) addtext = addtext.<span class="title function_">slice</span>(<span class="number">0</span>, addtext.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">const</span> add = addtext.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">	<span class="comment">//console.log(add);</span></span><br><span class="line">	<span class="keyword">return</span> add ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>直接把原来的代码全选删除，把上面的代码复制进去，按照注释修改自定义服务器地址之后点击部署，待显示版本已保存的时候，点击左上角的箭头，在点击设置-触发器，把刚刚的自定义服务器地址添加到自定义域中，在添加一个路由地址，按照这个格式填即可：docker.mydomain.com&#x2F;*</li>
<li>稍等一会，在浏览器打开刚刚的地址试一下，不出意外的话，dockerhub将会正常打开，这表示部署已经完成<br><img src="https://cos.ui-beam.com/images/blog/article/cloudflare-workers-docker-proxy/cf-dockerhub.png" alt="cf-dockerhub"></li>
</ul>
<h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><p>例如您的Workers项目域名为：<code>docker.fxxk.dedyn.io</code>；</p>
<h3 id="1-官方镜像路径前面加域名"><a href="#1-官方镜像路径前面加域名" class="headerlink" title="1.官方镜像路径前面加域名"></a>1.官方镜像路径前面加域名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull docker.fxxk.dedyn.io/stilleshan/frpc:latest</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull docker.fxxk.dedyn.io/library/nginx:stable-alpine3.19-perl</span><br></pre></td></tr></table></figure>

<h3 id="2-一键设置镜像加速"><a href="#2-一键设置镜像加速" class="headerlink" title="2.一键设置镜像加速"></a>2.一键设置镜像加速</h3><p>修改文件 <code>/etc/docker/daemon.json</code>（如果不存在则创建）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://请替换为您自己的Worker自定义域名&quot;] </span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<ul>
<li>接下来实际测试一下，按照刚刚的方法设置一下镜像加速，再次拉取之前超时的镜像，这次就很顺利的拉下来了<br><img src="https://cos.ui-beam.com/images/blog/article/cloudflare-workers-docker-proxy/docker-pull-ok.png" alt="docker-pull-ok"></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>只需一个github账号从0到1使用hexo博客框架和Butterfly主题搭建一个属于自己的博客 (无需云服务器)</title>
    <url>/2024/06/26/49438d879a13/</url>
    <content><![CDATA[<h2 id="只需一个github账号从0到1使用hexo博客框架和Butterfly主题搭建一个属于自己的博客-无需云服务器"><a href="#只需一个github账号从0到1使用hexo博客框架和Butterfly主题搭建一个属于自己的博客-无需云服务器" class="headerlink" title="只需一个github账号从0到1使用hexo博客框架和Butterfly主题搭建一个属于自己的博客 (无需云服务器)"></a>只需一个github账号从0到1使用hexo博客框架和Butterfly主题搭建一个属于自己的博客 (无需云服务器)</h2><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>最近在网上经常刷到各种博客和个人主页，看着就挺手痒的，突然想起来以前大学的时候也做了一个博客，不过后来因为上班之后就没时间去更新和维护了，直到现在也只是个半成品，最近公司假期放得比较多，想着要不就重新搭建一个新的博客吧，正好也能写一篇文章（水一篇文章）</li>
</ul>
<h2 id="什么是hexo"><a href="#什么是hexo" class="headerlink" title="什么是hexo"></a>什么是hexo</h2><ul>
<li>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li>
</ul>
<h2 id="hexo常用指令"><a href="#hexo常用指令" class="headerlink" title="hexo常用指令"></a>hexo常用指令</h2><ul>
<li>在开始搭建之前，建议先了解几个常用指令，这对后面的安装调试都非常有帮助 (资料来源官方)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init [folder] # 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</span><br><span class="line">hexo new [layout] &lt;title&gt; # 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</span><br><span class="line">hexo generate # 生成静态文件</span><br><span class="line">hexo server # 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span><br><span class="line">hexo deploy # 部署网站。</span><br><span class="line">hexo clean # 清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</span><br></pre></td></tr></table></figure></li>
<li>这里只是几个比较常用的指令，并没有详细说明使用方法，详细说明请到官方文档查询，这里也把官方链接贴出来<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hexo.io/zh-cn/docs/commands</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ol>
<li>Github账号（用于网页搭建使用）</li>
<li>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li>Git</li>
</ol>
<ul>
<li>如果您的电脑中已经安装上述必备程序，那么恭喜您！你可以直接前往 安装 Hexo 步骤。</li>
<li>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</li>
</ul>
<h2 id="安装NodeJS和Git"><a href="#安装NodeJS和Git" class="headerlink" title="安装NodeJS和Git"></a>安装NodeJS和Git</h2><ul>
<li>打开浏览器，这里我用的是微软的Edge，在地址栏复制以下链接粘贴回车安装包将会开始下载，下载完成之后打开一路下一步安装即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://npmmirror.com/mirrors/node/v20.14.0/node-v20.14.0-x64.msi</span><br><span class="line">https://mirror.ghproxy.com/https://github.com/git-for-windows/git/releases/download/v2.45.2.windows.1/Git-2.45.2-64-bit.exe</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="测试安装是否完成"><a href="#测试安装是否完成" class="headerlink" title="测试安装是否完成"></a>测试安装是否完成</h2><ul>
<li>安装完成之后右击Windows徽标，选择终端打开输入node -v和git -v，如果能跳出版本号的话就是安装成功了（如图所示）<br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/nodejs&git-install-ok.png" alt="nodejs&amp;git-install-ok"></li>
</ul>
<h2 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h2><ul>
<li>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo，这里可以提前准备一个代码编辑器，我使用的是来自微软的VSCode，选择提前准备好存放代码的位置，右击用code打开，一般打开之后底下会弹出一个终端，这时候在终端输入以下指令开始安装hexo，一般情况下，只要不是显示红色字体，都是安装成功了的（黄色字体可以不用管）<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-install.png" alt="hexo-install"></li>
</ul>
<h1 id="创建博客以及初始化"><a href="#创建博客以及初始化" class="headerlink" title="创建博客以及初始化"></a>创建博客以及初始化</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ul>
<li>在终端里输入以下指令开始创建博客，这里我输入的是blog2是因为我已经创建了一个同名的文件夹了，所以需要避开重名<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>
<img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-init.png" alt="hexo-init"></li>
<li>待跑码完成，可以在文件管理器里看到一个名为blog的文件夹(请无视这个blog2，正常情况都是blog)，打开之后会看到一堆文件以及文件夹，这些就是搭建博客所需的文件<br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/blog2-file.png" alt="hexo-file"></li>
</ul>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul>
<li>接下来可以输入以下指令可以测试一下博客是否正常运行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li>正常情况下，当启动服务器之后，终端会跳出本地访问地址，打开这个地址，如果出现以下界面，说明博客启动成功，一切正常，就可以进行接下来的操作了<br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-server.png" alt="hexo-server"><br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/blog2-default.png" alt="blog2-default"></li>
</ul>
<h1 id="更换主题为butterfly以及初始化"><a href="#更换主题为butterfly以及初始化" class="headerlink" title="更换主题为butterfly以及初始化"></a>更换主题为butterfly以及初始化</h1><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><ul>
<li>在终端里输入以下指令开始拉取butterfly主题源码<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure></li>
<li>到这个步骤很多人可能会遇到无法拉取源码，这里也准备了一个国内可以使用的<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b master https://mirror.ghproxy.com/https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>
<img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/git-butterfly.png" alt="git-butterfly"></li>
<li>待源码拉取完成之后，打开themes文件夹，会看到一个名为butterfly的文件夹，打开文件夹会看到很多文件，这个就是butterfly主题的所有文件了<br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-butterfly.png" alt="hexo-butterfly"></li>
</ul>
<h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><ul>
<li>接下来打开_config.yml这个配置文件，按Ctrl+F直接搜索theme这个字段，将原本的landscape改为butterfly，按Ctrl+S保存一下<div class="note warning simple"><p>一定要养成随手保存的习惯，这是血的教训！！！</p>
</div>
<img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-config.png" alt="hexo-config"><br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-config-butterfly.png" alt="hexo-config-butterfly"></li>
</ul>
<h2 id="安装所需的插件"><a href="#安装所需的插件" class="headerlink" title="安装所需的插件"></a>安装所需的插件</h2><p>在终端里输入以下指令安装pug 以及 stylus 的渲染器，这是必要的插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<h2 id="测试主题"><a href="#测试主题" class="headerlink" title="测试主题"></a>测试主题</h2><ul>
<li>接下来可以在本地先测试一下效果看看，输入以下指令清除缓存并运行本地服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li>每次都要这么重复输入相同指令，感觉有点麻烦，后面我去查了一下相关的文档以及文章，发现可以修改package.json里的script字段，直接把要执行的命令输入进去，后面只需要输入npm run server就可以执行相同的效果了，具体步骤如下：<ol>
<li>打开blog目录里的package.json，用之前的编辑器打开，这里我用的是VSCode</li>
<li>定位到scripts字段里的server，这里能看到官方的只有一个hexo server，直接在hexo这个字段前面打一个空格输入逻辑连接符 &amp;&amp; 中间还有一个空格在加上需要的执行的指令，这里我就加了一个hexo clean，这段指令的意思是先每次运行都先清除缓存之后在运行本地服务<br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/package-file.png" alt="package-file"><br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-package.png" alt="hexo-package"></li>
</ol>
</li>
<li>把package.json设置好之后，输入以下指令，打开浏览器看下主题是否一切正常<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure>
<img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/butterfly-test.png" alt="butterfly-test"></li>
</ul>
<h2 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h2><h3 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h3><ul>
<li>看到这个界面就表示主题安装成功，并且运行一切正常，但是现在主题光秃秃的什么都没有，接下来就来做一个最基本的界面吧</li>
<li>接下来打开主题文件夹(&#x2F;blog&#x2F;theme&#x2F;butterfly) 把_config.yml这个文件直接复制到一个空闲的文件夹，并重命名为_config.butterfly.yml，之后剪切并粘贴到博客目录中<div class="note warning simple"><p>注意: 复制的是主题的 _config.yml ，而不是博客目录下的 _config.yml，以后只需要在 _config.butterfly.yml 进行配置就行。<br>如果使用了 _config.butterfly.yml， 配置主题的 _config.yml 将不会有效果。</p>
</div>
<div class="note danger simple"><p>注意： 不要把主题目录的 _config.yml 删掉</p>
</div>
<img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-file.png" alt="hexo-file"></li>
<li>接下来先创建几个基本的页面：标签，分类，友情链接，先把之前运行的服务按Ctrl+C结束运行</li>
<li>确保此时终端显示是在博客目录下(blog)而不是在主题目录下<br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-cmd.png" alt="hexo-cmd"></li>
<li>输入以下指令分别创建标签，分类，友情链接页面<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page link</span><br></pre></td></tr></table></figure></li>
<li>打开博客目录下的source文件夹，会看到三个名为tags，categories，link的文件夹，对应的也就是标签，分类，友情链接，分别打开tags文件夹，里面有一个名为index.md的文件，打开这个文件，在时间末尾按一下回车，输入type: “tags” 保存退出，接下来以此类推，打开另外两个文件夹，按照文件夹名称添加type，重复上面的操作即可<br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/new-page-tags.png" alt="new-page-tags"><br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/new-page-categories.png" alt="new-page-categories"><br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/new-page-link.png" alt="new-page-link"></li>
</ul>
<h3 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h3><ul>
<li>在博客目录中的 source&#x2F;_data（如果没有 _data 文件夹，请自行创建），创建一个名为文件 link.yml的文件，复制以下代码直接粘贴，后续想要添加链接或者是修改的话，都按照这个文件里的格式修改即可<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网志框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="顶部导航栏添加"><a href="#顶部导航栏添加" class="headerlink" title="顶部导航栏添加"></a>顶部导航栏添加</h3><ul>
<li>现在博客几个最基本的页面都有了，但是顶部还是光秃秃的，接下来就来加几个常用的按钮吧</li>
<li>打开博客目录下的_config.butterfly.yml文件，原始文件里的都是繁体字，建议直接按Ctrl+F搜索Menu，找到这个字段之后，直接复制下面我编辑好的中文目录替换即可，当然你也可以自己修改<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Menu 目录</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">媒体||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">电影:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure></li>
<li>替换好之后直接保存，输入npm run server测试效果，不出意外的话，那就跟我图片的是一模一样的，到这里博客基本功能就可以使用了，这里没有写太多怎样去自定义博客功能，这篇教程主要是面向新手朋友的，具体怎么去自定义功能，建议去作者的博客看看，里面写的非常详细，这里也把链接放在文章最后了，可以自行跳转</li>
</ul>
<h1 id="把博客部署到GitHub"><a href="#把博客部署到GitHub" class="headerlink" title="把博客部署到GitHub"></a>把博客部署到GitHub</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul>
<li>停止博客服务运行，确保终端此时显示的目录是博客目录(blog)在终端输入以下指令开始安装插件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>打开GitHub，如果没有账号的可以自己注册一个，注册登录好之后，点击右上角的加号旁的小三角形，点击New repository创建一个新仓库，仓库名一定要按照以下格式创建，不然博客会无法识别并上线</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你的GitHub用户名.github.io</span><br></pre></td></tr></table></figure>
<p><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/github-new.png" alt="github-new"><br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/github-new-repository.png" alt="github-new-repository"><br>创建完成之后，会自动跳转到以下地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/你的用户名/你的GitHub用户名.github.io</span><br></pre></td></tr></table></figure>
<p><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/new-name.github.io.png" alt="new-name.github.io"></p>
<h2 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h2><ul>
<li>打开博客目录下的_config.yml文件，找到deploy这个字段，在repo里输入你的仓库地址，branch这里填入master<br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-deploy.png" alt="hexo-deploy"><div class="note warning simple"><p>注意: 一定要按照格式输入，该加空格的地方一定要加，否则在运行时会报错</p>
</div></li>
</ul>
<h2 id="上传源码"><a href="#上传源码" class="headerlink" title="上传源码"></a>上传源码</h2><ul>
<li>在终端输入以下指令，设置一下git参数<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub绑定的邮箱&quot;</span><br></pre></td></tr></table></figure></li>
<li>接下来依次执行以下指令，也可以使用之前修改package.json的方法，直接一次性执行，这里我就是直接把下面的指令都放到package.json里面了，如果和我的一样的话，那直接输入npm run deploy就可以了<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/package.json-deploy.png" alt="package.json-deploy"></li>
</ul>
<h2 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h2><ul>
<li>到这一步可能很多人会出现GitHub无法连接的情况，这是正常的，一般情况下多试几次就好了，，当跑码完成之后，回到刚刚创建的仓库，就能看到博客源码了，此时在浏览器地址输入：你的GitHub用户名.github.io，就能看到博客已经正常运行了<ul>
<li>例如：我的用户名是ui-beam-9，那么我的博客地址就是 ui-beam-9.github.io<br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/hexo-deploy-ok.png" alt="hexo-deploy-ok"><br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/github-repository-ok.png" alt="github-repository-ok"><br><img src="https://cos.ui-beam.com/images/blog/article/hexo-theme-butterfly/ui-beam-9.github.io.png" alt="ui-beam-9.github.io"></li>
</ul>
</li>
</ul>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><div class="note info simple"><p>本篇文章所有资料来源均来源于hexo和Butterfly官方，感谢这些开发者做出的贡献</p>
</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hexo.io/zh-cn/docs</span><br><span class="line">https://butterfly.js.org</span><br></pre></td></tr></table></figure>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><ul>
<li>到这里博客已经搭建并部署完成了<br> 现在你的博客网站的地址是 xxx.github.io，如果觉得这个网址不够好的话，可以设置个人域名了，但是需要花钱<ul>
<li>其实现在域名也很便宜，有条件的还是买一个域名吧，当然如果只是白嫖的话，这个网站也已经够用了，毕竟也不用买云服务器，可以省下一笔钱）<div class="note info simple"><p>之前因为一时心血来潮就做了这个博客，但是后面因为进入社会之后，一直没时间维护，更不用说去更新文章了，这次因为工作已经稳定下来，也有时间维护了，后面会持续更新的，不会像现在这样，时隔两年才更新了两篇文章（咕咕咕）</p>
</div>
<div class="note default simple"><p>下期预告：基于 Cloudflare Workers 搭建一个专属的Docker镜像站以及拉取代理</p>
</div></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>butterfly</category>
      </categories>
  </entry>
</search>
